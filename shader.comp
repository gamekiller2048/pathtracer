#version 430 core

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D u_imgOutput;

uniform vec2 u_resolution;
uniform vec3 u_cameraPos;
uniform mat4 u_cameraProj;
uniform mat4 u_cameraView;
uniform samplerCube u_background;
uniform float u_seed;
uniform int u_frameCount;

struct Ray {
	vec3 origin;
	vec3 dir;
};

const float PI = 3.1415926;

const int SPHERE = 0;
const int PLANE = 1;
const int TRIANGLE = 1;

// Lambertian + CookTorrence BRDF
struct PBRMaterial {
	vec3 albedo;
	float roughness;
	vec3 emission;
	float metalness;
	float transmission;
	float ior;
};

struct Sphere {
	vec3 origin;
	float radius;
};

struct Plane {
	vec3 normal;
	vec3 p;
};


struct Triangle {
	vec3 v0;
	vec3 v1;
	vec3 v2;
};

struct Hittable
{
	uint type;
	uint index;
	uint matIndex;
};

PBRMaterial materials[] = {
	PBRMaterial(vec3(1.0f), 1.0f, vec3(0.0f), 0.0f, 0.0f, 0.0f),
	PBRMaterial(vec3(1.0f, 0.0f, 0.0f), 1.0f, vec3(0.0f), 0.0f, 0.0f, 0.0f),
	PBRMaterial(vec3(0.0f, 1.0f, 0.0f), 0.0001f, vec3(0.0f), 1.0f, 0.0f, 0.0f),
	PBRMaterial(vec3(1.0f), 1.0f, vec3(0.0f), 0.0f, 1.0f, 1.5f),
	PBRMaterial(vec3(1.0f), 1.0f, vec3(1.0f, 0.0f, 0.0f), 0.0f, 0.0f, 0.0f)
};

Sphere spheres[] = {
	Sphere(vec3(0.7f, 0.0f, 0.0f), 0.3f),
	Sphere(vec3(0.0f, 0.0f, 0.0f), 0.3f),
	Sphere(vec3(-0.7f, 0.0f, 0.0f), 0.3f),
	Sphere(vec3(0.0f, 1.0f, 0.0f), 0.1f)
};

Plane planes[] = {
	Plane(vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, -0.5f, 0.0f))
};

Triangle triangles[] = {
	Triangle(vec3(1.0f, 1.0f, 1.0f), vec3(0.0f, 0.0f, 0.0f), vec3(0.0f, 2.0f, 0.0f))
};

const int NUM_OBJECTS = 7;
Hittable objects[] = {
	Hittable(PLANE, 0, 0),
	Hittable(SPHERE, 0, 1),
	Hittable(SPHERE, 1, 2),
	Hittable(SPHERE, 2, 3),
	Hittable(SPHERE, 3, 4),
	Hittable(TRIANGLE, 0, 1)
};

// TODO: bug for some reason biased on section of sphere
float rand(vec2 uv) {
	vec2 seed = uv + u_seed;
	return fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453);
}

vec2 randVec2(vec2 uv) {
	vec2 seed = uv + u_seed;

	return vec2(
		fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453),
		fract(sin(dot(seed * 1.3, vec2(39.3468, 11.135))) * 15731.7431)
	);
}

vec3 randVec3(vec2 uv) {
	vec2 seed = uv + u_seed;

	return vec3(
		fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453),
		fract(sin(dot(seed, vec2(93.9898, 67.345))) * 24634.6345),
		fract(sin(dot(seed, vec2(45.332, 12.345))) * 56445.2345)
	);
}

vec3 randRangeVec3(vec2 uv, float min, float max) {
	vec3 base = randVec3(uv);
	return mix(vec3(min), vec3(max), base);
}

vec3 randHemisphereCosWeighted(vec2 uv, vec3 normal) {
	vec2 rand = randVec2(uv);

	// radius inside unit sphere
	float r = sqrt(rand.x);
	// scale theta [0, 2pi]
	float theta = 2.0 * PI * rand.y;
	
	// sample direction in tangent space
	float x = r * cos(theta);
	float y = r * sin(theta);
	float z = sqrt(1.0 - rand.x);
	
	// Build an orthonormal basis (TBN) around the normal
	vec3 tangent = normalize(abs(normal.x) > 0.1 ? cross(normal, vec3(0,1,0)) : cross(normal, vec3(1,0,0)));
	vec3 bitangent = cross(normal, tangent);
	
	// Transform sample to world space
	return normalize(x * tangent + y * bitangent + z * normal);
}

float hitSphere(inout Sphere sphere, inout Ray ray)
{
	vec3 origin = ray.origin - sphere.origin;

	float a = dot(ray.dir, ray.dir);
	float b = 2 * dot(origin, ray.dir);
	float c = dot(origin, origin) - sphere.radius * sphere.radius;

	float discriminant = b * b - 4.0f * a * c;

	if(discriminant < 0.0f)
		return -1.0f;

	return (-b - sqrt(discriminant)) / (2.0f * a); 
}

vec3 hitSphereNormal(in Sphere sphere, vec3 hitPos)
{
	return normalize(hitPos - sphere.origin);
}

float hitPlane(in Plane plane, in Ray ray)
{
	float NdotD = dot(plane.normal, ray.dir);

	if(NdotD == 0.0f)
		return -1.0f;

	return dot(plane.normal, plane.p - ray.origin) / NdotD;
}

vec3 hitPlaneNormal(in Plane plane)
{
	return plane.normal;
}

float hitTriangle(in Triangle triangle, in Ray ray)
{
	vec3 edge1 = triangle.v1 - triangle.v0;
	vec3 edge2 = triangle.v2 - triangle.v0;
	return -1.0f; // TODO: FINISH
}

vec3 hitTriangleNormal(in Triangle triangle)
{
	vec3 edge1 = triangle.v1 - triangle.v0;
	vec3 edge2 = triangle.v2 - triangle.v0;
	return normalize(cross(edge1, edge2));
}


// GGX/TrowBridge-Reitz Normal Distribution
float D_GGX(float NdotH, float roughness) {
	float a2 = roughness * roughness;
	float denom = (NdotH * NdotH) * (a2 - 1.0) + 1.0;
	denom = max(denom, 0.0001f);
	return a2 / (PI * denom * denom);
}

// Geometry term: Schlick-GGX approximation for one direction
float G_SchlickGGX(float NdotV, float roughness) {
	float k = roughness / 2.0f;
	NdotV = max(NdotV, 0.001f);
	return NdotV / (NdotV * (1.0 - k) + k);
}

// Smith geometry function: combined shadowing-masking for both view and light
float G_Smith(float NdotV, float NdotL, float roughness) {
	return G_SchlickGGX(NdotV, roughness) * G_SchlickGGX(NdotL, roughness);
}

vec3 Fresnel_Schlick(float cosTheta, vec3 F0) {
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 sampleGGX(vec2 uv, vec3 normal, float roughness) {
	float a = roughness * roughness;

	vec2 rand = randVec2(uv);
	float phi = 2.0 * PI * rand.x;
	float cosTheta = sqrt((1.0 - rand.y) / max((1.0 + (a - 1.0) * rand.y), 0.0001f));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

	// Tangent space vector
	vec3 H_tangent = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);

	// Transform to world space aligned with N
	// Build an orthonormal basis (TBN) around the normal
	vec3 tangent = normalize(abs(normal.x) > 0.1 ? cross(normal, vec3(0,1,0)) : cross(normal, vec3(1,0,0)));
	vec3 bitangent = cross(normal, tangent);
	
	// Transform sample to world space
	return normalize(H_tangent.x * tangent + H_tangent.y * bitangent + H_tangent.z * normal);
}


vec3 castRay(vec2 uv, Ray ray, uint numBounces)
{
	vec3 finalColor = vec3(0.0f);

	// how much light is carried through bounces
	vec3 throughput = vec3(1.0);

	for(int b=0; b < numBounces; b++) {
		Hittable closestObj;
		float closestHitdist = 999999.0f;

		for(int i=0; i < NUM_OBJECTS; i++) {
			Hittable object = objects[i];

			float hitDist;
			if(object.type == SPHERE)
				hitDist = hitSphere(spheres[object.index], ray);
			else if(object.type == PLANE)
				hitDist = hitPlane(planes[object.index], ray);
			else if(object.type == TRIANGLE) {
				hitDist = hitTriangle(triangles[object.index], ray);
				return vec3(1, 0, 0);
			}

			// infront of camera and closer than closest
			if(hitDist > 0.0f && hitDist < closestHitdist) {
				closestHitdist = hitDist;
				closestObj = object;
			}
		}

		// failed intersection test
		if(closestHitdist == 999999.0f) {
			finalColor += vec3(texture(u_background, ray.dir * vec3(1.0f, -1.0f, 1.0f))) * throughput;
			break;
		}

		vec3 hitPos = ray.origin + ray.dir * closestHitdist;
		
		vec3 normal;

		if(closestObj.type == SPHERE)
			normal = hitSphereNormal(spheres[closestObj.index], hitPos);
		else if(closestObj.type == PLANE)
			normal = hitPlaneNormal(planes[closestObj.index]);
		else if(closestObj.type == TRIANGLE)
			normal = hitTriangleNormal(triangles[closestObj.index]);

		bool frontFace = dot(ray.dir, normal) < 0.0f;
		normal = frontFace ? normal : -normal; 

		PBRMaterial material = materials[closestObj.matIndex];

		// place ray at hitpoint + padding facing reflection
		ray.origin = hitPos + normal * 0.0001f;

		if(rand(uv + b) <= material.transmission) {
			float eta = frontFace ? (1.0f / material.ior) : material.ior; // air has ior of 1
			
			float cosTheta = dot(normal, -ray.dir);
			float sinThetaT = sqrt(1.0 - pow(cosTheta, 2));

			if(eta * sinThetaT <= 1.0f) {			
				vec3 rayOutPerpendicular = eta * (ray.dir + cosTheta * normal);
				vec3 rayOutParallel = -sqrt(1 - pow(length(rayOutPerpendicular), 2)) * normal;

				ray.origin = hitPos - normal * 0.0001f;
				ray.dir = normalize(rayOutParallel + rayOutPerpendicular);
			}
			else {
				ray.dir = reflect(ray.dir, normal);
			}
			continue;
		}

		
		vec3 viewDir = normalize(-ray.dir);
		vec3 halfWay;
		
		// base reflectivity (using metalness to lerp between 0-albedo)
		vec3 F0 = mix(vec3(0.0f), material.albedo, material.metalness);
		float specularProb = max(max(F0.r, F0.g), F0.b);

		// GGX sampling
		if(rand(uv + b) < specularProb) {
			halfWay = sampleGGX(uv + b, normal, material.roughness);
			ray.dir = reflect(-viewDir, halfWay);

			if(dot(ray.dir, normal) <= 0.0)
				break; // terminate if under the surface		
		}
		// cos weighted
		else {
			ray.dir = randHemisphereCosWeighted(uv + b, normal);
			halfWay = normalize(viewDir + ray.dir);
		}
		
		float NdotV = max(dot(normal, viewDir), 0.0f);
		float VdotH = max(dot(viewDir, halfWay), 0.0f);
		float NdotH = max(dot(normal, halfWay), 0.0f);
		float cosTheta = max(dot(normal, ray.dir), 0.0f);
		
		vec3 k_s = Fresnel_Schlick(VdotH, F0);
		vec3 k_d = (vec3(1.0f) - k_s) * (1.0f - material.metalness);

		float D = D_GGX(NdotH, material.roughness);
		float G = G_Smith(NdotV, cosTheta, material.roughness);

		vec3 specularBRDF = (D * k_s * G) / max(4.0f * NdotV * cosTheta, 0.0001f);
		float specularPdf = D * NdotH / max(4.0f * VdotH, 0.0001f);

		vec3 diffuseBrdf = k_d * material.albedo / PI;
		float diffusePdf = cosTheta / PI;

		// multi importance sampling using balance heurisitc (weighted sum of prob of sampling from pdf)
		float mis = specularProb * specularPdf + (1.0f - specularProb) * diffusePdf;
		vec3 BRDF = specularBRDF + diffuseBrdf;

		throughput *= BRDF * cosTheta / max(mis, 0.0001f);
		finalColor += material.emission * throughput;
	}

	return finalColor;
}

void main()
{
	vec2 uv = gl_GlobalInvocationID.xy / u_resolution * 2.0f - 1.0f;

	vec4 dir = vec4(uv, -1.0f, 1.0f) * inverse(u_cameraProj);
	dir /= dir.w;
	dir.w = 0;

	Ray ray = Ray(u_cameraPos, vec3(normalize(dir * inverse(u_cameraView))));
	
	vec3 finalColor = castRay(uv, ray, 10);
	vec4 avrg = ((u_frameCount - 1) * imageLoad(u_imgOutput, ivec2(gl_GlobalInvocationID.xy)) + vec4(finalColor, 1.0f)) / u_frameCount;
	
	imageStore(u_imgOutput, ivec2(gl_GlobalInvocationID.xy), avrg);
}